import { TxBuilder } from "../src/csl/tx_builder.class.ts";
import { get_slot_api } from "../src/lib/tip.api.ts";
import { DatabaseBuilder } from "../src/db/postgres.ts";
import { get_utxos_dbsync } from "../src/lib/utxo.api.ts";

const sql = new DatabaseBuilder()
  .setReadUrl("postgres://postgres:example@192.168.20.105:5432/cexplorer")
  .build()
  .getReadConnection();
const address =
  "addr_test1qqx93zaarmlqwv5ptslvaclyxt3kke2296kpaf6vfkz87kyzgpt30akcklt630wjw4cqzc253k6ud63c5kh9jexldmvs0h7dq6";
const blockfrost_url = "http://192.168.20.105:3010";
const blockfrost_api_key = "not_used";

const utxos = await get_utxos_dbsync(sql, address);
console.log("Utxos db sync", utxos, utxos.length);

await sql.end();
// const utxos = [
//   "82825820bc917c25be40b69b1669de26f3c5aa1f7fcf2734a55ed024509fd2fe72783f6801825839000c588bbd1efe0732815c3ecee3e432e36b654a2eac1ea74c4d847f5882405717f6d8b7d7a8bdd275700161548db5c6ea38a5ae5964df6ed9821a35e1a683a3581c4e081a9911d3b9a0d3b13d8708ada17aa1536cf6eba343a6761e0d9ea7581864616f676f72615f64756e67656f6e5f323737316361663801581864616f676f72615f64756e67656f6e5f333633656262386601581864616f676f72615f64756e67656f6e5f333935366365653401581864616f676f72615f64756e67656f6e5f353537616338613601581864616f676f72615f64756e67656f6e5f3634666231653138015764616f676f72615f64756e67656f6e5f3662616166386101581864616f676f72615f64756e67656f6e5f373163633337386201581cef698582c0338d1ff3f76a3a88b4dcb9f6e0729d80e949670f757379a446616574686572044565617274680244666972650145776174657202581cfae7fb2d73a5ab337f7b8230753e238ce0b769574f76c1a85bd70831ad5464616f676f72615f675f305f3736663864353237015464616f676f72615f675f315f3435353531653065015464616f676f72615f675f315f3664663530633263015364616f676f72615f675f315f66316330633566015464616f676f72615f675f325f3365633635343666015464616f676f72615f675f325f3538646637363363015464616f676f72615f675f335f3165316365313735015464616f676f72615f675f345f3430613132303536015464616f676f72615f675f355f3563303665636630015464616f676f72615f675f355f3634653464353930015364616f676f72615f675f385f61646362616131015464616f676f72615f735f335f3237623038343562015464616f676f72615f735f345f336438383366643501",
// ];
//
// const utxos = [
//   "82825820bc917c25be40b69b1669de26f3c5aa1f7fcf2734a55ed024509fd2fe72783f6801825839000c588bbd1efe0732815c3ecee3e432e36b654a2eac1ea74c4d847f5882405717f6d8b7d7a8bdd275700161548db5c6ea38a5ae5964df6ed9821a35e1a683a3581c4e081a9911d3b9a0d3b13d8708ada17aa1536cf6eba343a6761e0d9ea7581864616f676f72615f64756e67656f6e5f323737316361663801581864616f676f72615f64756e67656f6e5f333633656262386601581864616f676f72615f64756e67656f6e5f333935366365653401581864616f676f72615f64756e67656f6e5f353537616338613601581864616f676f72615f64756e67656f6e5f3634666231653138015764616f676f72615f64756e67656f6e5f3662616166386101581864616f676f72615f64756e67656f6e5f373163633337386201581cef698582c0338d1ff3f76a3a88b4dcb9f6e0729d80e949670f757379a446616574686572044565617274680244666972650145776174657202581cfae7fb2d73a5ab337f7b8230753e238ce0b769574f76c1a85bd70831ad5464616f676f72615f675f305f3736663864353237015464616f676f72615f675f315f3435353531653065015464616f676f72615f675f315f3664663530633263015364616f676f72615f675f315f66316330633566015464616f676f72615f675f325f3365633635343666015464616f676f72615f675f325f3538646637363363015464616f676f72615f675f335f3165316365313735015464616f676f72615f675f345f3430613132303536015464616f676f72615f675f355f3563303665636630015464616f676f72615f675f355f3634653464353930015364616f676f72615f675f385f61646362616131015464616f676f72615f735f335f3237623038343562015464616f676f72615f735f345f336438383366643501",
//   "828258203553d43fb020d5aa8ea9b30ac4cf96e75be22df275b9dddc05e43d71b2d3bb6d00825839000c588bbd1efe0732815c3ecee3e432e36b654a2eac1ea74c4d847f5882405717f6d8b7d7a8bdd275700161548db5c6ea38a5ae5964df6ed91a3b9aca00",
//   "828258203f8923882028614389126d18f8afdb15decba67761606dbae85d51e8e001f7d000825839000c588bbd1efe0732815c3ecee3e432e36b654a2eac1ea74c4d847f5882405717f6d8b7d7a8bdd275700161548db5c6ea38a5ae5964df6ed91a3b9aca00",
// ];
console.log("Utxos from frontend", utxos, utxos.length);

const tip_slot: number =
  (await get_slot_api(blockfrost_url, blockfrost_api_key)!) + 50_000;

const tx_builder = new TxBuilder()
  .with_receiver_address(address)
  .with_sender_address(address)
  .with_utxos(utxos)
  .build()
  .parse_utxos()
  .set_ttl(tip_slot)
  .set_inputs() // to get all inputs and put them under ONE utxo
  .add_inputs()
  .build_body_and_hash()
  .add_signers()
  .set_network_id(0) // testnet
  .build_tx()
  .assemble_tx()
  .remove_metadata();

console.log(tx_builder.get_json());

console.debug(tx_builder.get_tx_to_sign()?.to_hex());
